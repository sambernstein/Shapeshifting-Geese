{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww21180\viewh12860\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Sam Bernstein\
3/19/2015\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\qc\partightenfactor0
\cf0 Number Theory Product Test\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/30397788/python-all-combinations-of-subsets-of-a-string"}}{\fldrslt \cf0 http://stackoverflow.com/questions/30397788/python-all-combinations-of-subsets-of-a-string}}\
\
for permutations:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
{\field{\*\fldinst{HYPERLINK "http://stackoverflow.com/questions/8306654/finding-all-possible-permutations-of-a-given-string-in-python"}}{\fldrslt \cf0 http://stackoverflow.com/questions/8306654/finding-all-possible-permutations-of-a-given-string-in-python}}\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs28 \cf0 \ul \ulc0 To Do:\

\fs26 \ulnone Statistical analysis:
\fs28 \ul \
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\fs24 \cf0 \ulnone \
Statistical analysis of distribution of equal product numbers. It seems like there are disproportionately more equal product numbers that start with 1 than start with other digits. \
\
Find out if equal product numbers are more common among numbers with more digits by taking the number of equal product numbers with n digits and dividing it by the number of numbers with that many digits to get a frequency. Plot the frequency vs. n graph.\
\
Change found list of numbers to a dict where the key is the number and the value is a list of arrangements which produce that number.\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ul \
\
\
5/25/15:\ulnone \
As far as I can tell the program finds all equal product numbers, but it displays duplicates where the numbers in the arrangements are the same, just in a different order in the arrangement list. Simply using sets to get rid of duplicate arrangements cannot properly remedy this problem, as converting the arrangement lists into sets will lose repeated numbers within that arrangement list (i.e. [3, 24, 3, 3, 7] \'97> \{3, 7, 24\}, dropping the 3s )\
\
What is needed is some kind of multi-membered data type, most likely manufactured, that possesses features of both sets and lists in that the order of the members doesn\'92t matter but the repetition of members is preserved.\
\
Solution: \
Store each arrangement in a dict where the members of the arrangement are the keys and the values are the number of occurrences in the arrangement. Example: [3, 24, 3, 3, 7] \'97> \{3 : 3, 24 : 1, 7 : 1\}\
Make these dicts immutable so they can belong to a set of arrangements. \
\'97> These dicts made immutable by converting them into frozen sets of tuples of the form (int, number_of_those_ints)\
\
\
\ul Old Arrangements Game Plan:\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 \ulnone For a certain number of groups:\
	cycle through different numbers of digits per group:\
		cycle through different numbers for each group:\
}